// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: project.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_project_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_project_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_project_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_project_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_project_2eproto;
namespace chat {
class AllConnectedUsers;
struct AllConnectedUsersDefaultTypeInternal;
extern AllConnectedUsersDefaultTypeInternal _AllConnectedUsers_default_instance_;
class ChangeStatus;
struct ChangeStatusDefaultTypeInternal;
extern ChangeStatusDefaultTypeInternal _ChangeStatus_default_instance_;
class ServerResponse;
struct ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserInfoRequest;
struct UserInfoRequestDefaultTypeInternal;
extern UserInfoRequestDefaultTypeInternal _UserInfoRequest_default_instance_;
class UserRegister;
struct UserRegisterDefaultTypeInternal;
extern UserRegisterDefaultTypeInternal _UserRegister_default_instance_;
class UserRequest;
struct UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
class newMessage;
struct newMessageDefaultTypeInternal;
extern newMessageDefaultTypeInternal _newMessage_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::AllConnectedUsers* Arena::CreateMaybeMessage<::chat::AllConnectedUsers>(Arena*);
template<> ::chat::ChangeStatus* Arena::CreateMaybeMessage<::chat::ChangeStatus>(Arena*);
template<> ::chat::ServerResponse* Arena::CreateMaybeMessage<::chat::ServerResponse>(Arena*);
template<> ::chat::UserInfo* Arena::CreateMaybeMessage<::chat::UserInfo>(Arena*);
template<> ::chat::UserInfoRequest* Arena::CreateMaybeMessage<::chat::UserInfoRequest>(Arena*);
template<> ::chat::UserRegister* Arena::CreateMaybeMessage<::chat::UserRegister>(Arena*);
template<> ::chat::UserRequest* Arena::CreateMaybeMessage<::chat::UserRequest>(Arena*);
template<> ::chat::newMessage* Arena::CreateMaybeMessage<::chat::newMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

// ===================================================================

class newMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.newMessage) */ {
 public:
  inline newMessage() : newMessage(nullptr) {}
  ~newMessage() override;
  explicit PROTOBUF_CONSTEXPR newMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  newMessage(const newMessage& from);
  newMessage(newMessage&& from) noexcept
    : newMessage() {
    *this = ::std::move(from);
  }

  inline newMessage& operator=(const newMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline newMessage& operator=(newMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const newMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const newMessage* internal_default_instance() {
    return reinterpret_cast<const newMessage*>(
               &_newMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(newMessage& a, newMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(newMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(newMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  newMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<newMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const newMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const newMessage& from) {
    newMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(newMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.newMessage";
  }
  protected:
  explicit newMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 2,
    kRecipientFieldNumber = 3,
    kMessageFieldNumber = 4,
    kMessageTypeFieldNumber = 1,
  };
  // required string sender = 2;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // optional string recipient = 3;
  bool has_recipient() const;
  private:
  bool _internal_has_recipient() const;
  public:
  void clear_recipient();
  const std::string& recipient() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recipient(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recipient();
  PROTOBUF_NODISCARD std::string* release_recipient();
  void set_allocated_recipient(std::string* recipient);
  private:
  const std::string& _internal_recipient() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient(const std::string& value);
  std::string* _internal_mutable_recipient();
  public:

  // required string message = 4;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required bool message_type = 1;
  bool has_message_type() const;
  private:
  bool _internal_has_message_type() const;
  public:
  void clear_message_type();
  bool message_type() const;
  void set_message_type(bool value);
  private:
  bool _internal_message_type() const;
  void _internal_set_message_type(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chat.newMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool message_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class UserRegister final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UserRegister) */ {
 public:
  inline UserRegister() : UserRegister(nullptr) {}
  ~UserRegister() override;
  explicit PROTOBUF_CONSTEXPR UserRegister(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRegister(const UserRegister& from);
  UserRegister(UserRegister&& from) noexcept
    : UserRegister() {
    *this = ::std::move(from);
  }

  inline UserRegister& operator=(const UserRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegister& operator=(UserRegister&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRegister& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRegister* internal_default_instance() {
    return reinterpret_cast<const UserRegister*>(
               &_UserRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRegister& a, UserRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegister* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRegister>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserRegister& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserRegister& from) {
    UserRegister::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegister* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UserRegister";
  }
  protected:
  explicit UserRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // required string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required string ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:chat.UserRegister)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class UserInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UserInfoRequest) */ {
 public:
  inline UserInfoRequest() : UserInfoRequest(nullptr) {}
  ~UserInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR UserInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoRequest(const UserInfoRequest& from);
  UserInfoRequest(UserInfoRequest&& from) noexcept
    : UserInfoRequest() {
    *this = ::std::move(from);
  }

  inline UserInfoRequest& operator=(const UserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoRequest& operator=(UserInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UserInfoRequest*>(
               &_UserInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserInfoRequest& a, UserInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfoRequest& from) {
    UserInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UserInfoRequest";
  }
  protected:
  explicit UserInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kTypeRequestFieldNumber = 1,
  };
  // optional string user = 2;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // required bool type_request = 1;
  bool has_type_request() const;
  private:
  bool _internal_has_type_request() const;
  public:
  void clear_type_request();
  bool type_request() const;
  void set_type_request(bool value);
  private:
  bool _internal_type_request() const;
  void _internal_set_type_request(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chat.UserInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    bool type_request_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class ChangeStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChangeStatus) */ {
 public:
  inline ChangeStatus() : ChangeStatus(nullptr) {}
  ~ChangeStatus() override;
  explicit PROTOBUF_CONSTEXPR ChangeStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeStatus(const ChangeStatus& from);
  ChangeStatus(ChangeStatus&& from) noexcept
    : ChangeStatus() {
    *this = ::std::move(from);
  }

  inline ChangeStatus& operator=(const ChangeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeStatus& operator=(ChangeStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeStatus* internal_default_instance() {
    return reinterpret_cast<const ChangeStatus*>(
               &_ChangeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChangeStatus& a, ChangeStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeStatus& from) {
    ChangeStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChangeStatus";
  }
  protected:
  explicit ChangeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kNewStatusFieldNumber = 2,
  };
  // required string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required int32 newStatus = 2;
  bool has_newstatus() const;
  private:
  bool _internal_has_newstatus() const;
  public:
  void clear_newstatus();
  int32_t newstatus() const;
  void set_newstatus(int32_t value);
  private:
  int32_t _internal_newstatus() const;
  void _internal_set_newstatus(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:chat.ChangeStatus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    int32_t newstatus_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class UserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  ~UserRequest() override;
  explicit PROTOBUF_CONSTEXPR UserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRequest(const UserRequest& from);
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserRequest& from) {
    UserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UserRequest";
  }
  protected:
  explicit UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewUserFieldNumber = 2,
    kInfoRequestFieldNumber = 3,
    kStatusFieldNumber = 4,
    kMessageFieldNumber = 5,
    kOptionFieldNumber = 1,
  };
  // optional .chat.UserRegister newUser = 2;
  bool has_newuser() const;
  private:
  bool _internal_has_newuser() const;
  public:
  void clear_newuser();
  const ::chat::UserRegister& newuser() const;
  PROTOBUF_NODISCARD ::chat::UserRegister* release_newuser();
  ::chat::UserRegister* mutable_newuser();
  void set_allocated_newuser(::chat::UserRegister* newuser);
  private:
  const ::chat::UserRegister& _internal_newuser() const;
  ::chat::UserRegister* _internal_mutable_newuser();
  public:
  void unsafe_arena_set_allocated_newuser(
      ::chat::UserRegister* newuser);
  ::chat::UserRegister* unsafe_arena_release_newuser();

  // optional .chat.UserInfoRequest infoRequest = 3;
  bool has_inforequest() const;
  private:
  bool _internal_has_inforequest() const;
  public:
  void clear_inforequest();
  const ::chat::UserInfoRequest& inforequest() const;
  PROTOBUF_NODISCARD ::chat::UserInfoRequest* release_inforequest();
  ::chat::UserInfoRequest* mutable_inforequest();
  void set_allocated_inforequest(::chat::UserInfoRequest* inforequest);
  private:
  const ::chat::UserInfoRequest& _internal_inforequest() const;
  ::chat::UserInfoRequest* _internal_mutable_inforequest();
  public:
  void unsafe_arena_set_allocated_inforequest(
      ::chat::UserInfoRequest* inforequest);
  ::chat::UserInfoRequest* unsafe_arena_release_inforequest();

  // optional .chat.ChangeStatus status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::chat::ChangeStatus& status() const;
  PROTOBUF_NODISCARD ::chat::ChangeStatus* release_status();
  ::chat::ChangeStatus* mutable_status();
  void set_allocated_status(::chat::ChangeStatus* status);
  private:
  const ::chat::ChangeStatus& _internal_status() const;
  ::chat::ChangeStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::chat::ChangeStatus* status);
  ::chat::ChangeStatus* unsafe_arena_release_status();

  // optional .chat.newMessage message = 5;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::chat::newMessage& message() const;
  PROTOBUF_NODISCARD ::chat::newMessage* release_message();
  ::chat::newMessage* mutable_message();
  void set_allocated_message(::chat::newMessage* message);
  private:
  const ::chat::newMessage& _internal_message() const;
  ::chat::newMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::chat::newMessage* message);
  ::chat::newMessage* unsafe_arena_release_message();

  // required int32 option = 1;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  int32_t option() const;
  void set_option(int32_t value);
  private:
  int32_t _internal_option() const;
  void _internal_set_option(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:chat.UserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::chat::UserRegister* newuser_;
    ::chat::UserInfoRequest* inforequest_;
    ::chat::ChangeStatus* status_;
    ::chat::newMessage* message_;
    int32_t option_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit PROTOBUF_CONSTEXPR UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo& from) {
    UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kIpFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // optional string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional int32 status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:chat.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class AllConnectedUsers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.AllConnectedUsers) */ {
 public:
  inline AllConnectedUsers() : AllConnectedUsers(nullptr) {}
  ~AllConnectedUsers() override;
  explicit PROTOBUF_CONSTEXPR AllConnectedUsers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllConnectedUsers(const AllConnectedUsers& from);
  AllConnectedUsers(AllConnectedUsers&& from) noexcept
    : AllConnectedUsers() {
    *this = ::std::move(from);
  }

  inline AllConnectedUsers& operator=(const AllConnectedUsers& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllConnectedUsers& operator=(AllConnectedUsers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllConnectedUsers& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllConnectedUsers* internal_default_instance() {
    return reinterpret_cast<const AllConnectedUsers*>(
               &_AllConnectedUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AllConnectedUsers& a, AllConnectedUsers& b) {
    a.Swap(&b);
  }
  inline void Swap(AllConnectedUsers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllConnectedUsers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllConnectedUsers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllConnectedUsers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllConnectedUsers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AllConnectedUsers& from) {
    AllConnectedUsers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllConnectedUsers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.AllConnectedUsers";
  }
  protected:
  explicit AllConnectedUsers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectedUsersFieldNumber = 1,
  };
  // repeated .chat.UserInfo connectedUsers = 1;
  int connectedusers_size() const;
  private:
  int _internal_connectedusers_size() const;
  public:
  void clear_connectedusers();
  ::chat::UserInfo* mutable_connectedusers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInfo >*
      mutable_connectedusers();
  private:
  const ::chat::UserInfo& _internal_connectedusers(int index) const;
  ::chat::UserInfo* _internal_add_connectedusers();
  public:
  const ::chat::UserInfo& connectedusers(int index) const;
  ::chat::UserInfo* add_connectedusers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInfo >&
      connectedusers() const;

  // @@protoc_insertion_point(class_scope:chat.AllConnectedUsers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInfo > connectedusers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class ServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ServerResponse) */ {
 public:
  inline ServerResponse() : ServerResponse(nullptr) {}
  ~ServerResponse() override;
  explicit PROTOBUF_CONSTEXPR ServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerResponse(const ServerResponse& from);
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerResponse& from) {
    ServerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ServerResponse";
  }
  protected:
  explicit ServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerMessageFieldNumber = 3,
    kConnectedUsersFieldNumber = 4,
    kMessageFieldNumber = 5,
    kUserInfoResponseFieldNumber = 6,
    kChangeFieldNumber = 7,
    kOptionFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // required string serverMessage = 3;
  bool has_servermessage() const;
  private:
  bool _internal_has_servermessage() const;
  public:
  void clear_servermessage();
  const std::string& servermessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_servermessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_servermessage();
  PROTOBUF_NODISCARD std::string* release_servermessage();
  void set_allocated_servermessage(std::string* servermessage);
  private:
  const std::string& _internal_servermessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servermessage(const std::string& value);
  std::string* _internal_mutable_servermessage();
  public:

  // optional .chat.AllConnectedUsers connectedUsers = 4;
  bool has_connectedusers() const;
  private:
  bool _internal_has_connectedusers() const;
  public:
  void clear_connectedusers();
  const ::chat::AllConnectedUsers& connectedusers() const;
  PROTOBUF_NODISCARD ::chat::AllConnectedUsers* release_connectedusers();
  ::chat::AllConnectedUsers* mutable_connectedusers();
  void set_allocated_connectedusers(::chat::AllConnectedUsers* connectedusers);
  private:
  const ::chat::AllConnectedUsers& _internal_connectedusers() const;
  ::chat::AllConnectedUsers* _internal_mutable_connectedusers();
  public:
  void unsafe_arena_set_allocated_connectedusers(
      ::chat::AllConnectedUsers* connectedusers);
  ::chat::AllConnectedUsers* unsafe_arena_release_connectedusers();

  // optional .chat.newMessage message = 5;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::chat::newMessage& message() const;
  PROTOBUF_NODISCARD ::chat::newMessage* release_message();
  ::chat::newMessage* mutable_message();
  void set_allocated_message(::chat::newMessage* message);
  private:
  const ::chat::newMessage& _internal_message() const;
  ::chat::newMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::chat::newMessage* message);
  ::chat::newMessage* unsafe_arena_release_message();

  // optional .chat.UserInfo userInfoResponse = 6;
  bool has_userinforesponse() const;
  private:
  bool _internal_has_userinforesponse() const;
  public:
  void clear_userinforesponse();
  const ::chat::UserInfo& userinforesponse() const;
  PROTOBUF_NODISCARD ::chat::UserInfo* release_userinforesponse();
  ::chat::UserInfo* mutable_userinforesponse();
  void set_allocated_userinforesponse(::chat::UserInfo* userinforesponse);
  private:
  const ::chat::UserInfo& _internal_userinforesponse() const;
  ::chat::UserInfo* _internal_mutable_userinforesponse();
  public:
  void unsafe_arena_set_allocated_userinforesponse(
      ::chat::UserInfo* userinforesponse);
  ::chat::UserInfo* unsafe_arena_release_userinforesponse();

  // optional .chat.ChangeStatus change = 7;
  bool has_change() const;
  private:
  bool _internal_has_change() const;
  public:
  void clear_change();
  const ::chat::ChangeStatus& change() const;
  PROTOBUF_NODISCARD ::chat::ChangeStatus* release_change();
  ::chat::ChangeStatus* mutable_change();
  void set_allocated_change(::chat::ChangeStatus* change);
  private:
  const ::chat::ChangeStatus& _internal_change() const;
  ::chat::ChangeStatus* _internal_mutable_change();
  public:
  void unsafe_arena_set_allocated_change(
      ::chat::ChangeStatus* change);
  ::chat::ChangeStatus* unsafe_arena_release_change();

  // required int32 option = 1;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  int32_t option() const;
  void set_option(int32_t value);
  private:
  int32_t _internal_option() const;
  void _internal_set_option(int32_t value);
  public:

  // required int32 code = 2;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:chat.ServerResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servermessage_;
    ::chat::AllConnectedUsers* connectedusers_;
    ::chat::newMessage* message_;
    ::chat::UserInfo* userinforesponse_;
    ::chat::ChangeStatus* change_;
    int32_t option_;
    int32_t code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// newMessage

// required bool message_type = 1;
inline bool newMessage::_internal_has_message_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool newMessage::has_message_type() const {
  return _internal_has_message_type();
}
inline void newMessage::clear_message_type() {
  _impl_.message_type_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool newMessage::_internal_message_type() const {
  return _impl_.message_type_;
}
inline bool newMessage::message_type() const {
  // @@protoc_insertion_point(field_get:chat.newMessage.message_type)
  return _internal_message_type();
}
inline void newMessage::_internal_set_message_type(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.message_type_ = value;
}
inline void newMessage::set_message_type(bool value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:chat.newMessage.message_type)
}

// required string sender = 2;
inline bool newMessage::_internal_has_sender() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool newMessage::has_sender() const {
  return _internal_has_sender();
}
inline void newMessage::clear_sender() {
  _impl_.sender_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& newMessage::sender() const {
  // @@protoc_insertion_point(field_get:chat.newMessage.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void newMessage::set_sender(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.newMessage.sender)
}
inline std::string* newMessage::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:chat.newMessage.sender)
  return _s;
}
inline const std::string& newMessage::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void newMessage::_internal_set_sender(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* newMessage::_internal_mutable_sender() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sender_.Mutable(GetArenaForAllocation());
}
inline std::string* newMessage::release_sender() {
  // @@protoc_insertion_point(field_release:chat.newMessage.sender)
  if (!_internal_has_sender()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sender_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void newMessage::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sender_.SetAllocated(sender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.newMessage.sender)
}

// optional string recipient = 3;
inline bool newMessage::_internal_has_recipient() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool newMessage::has_recipient() const {
  return _internal_has_recipient();
}
inline void newMessage::clear_recipient() {
  _impl_.recipient_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& newMessage::recipient() const {
  // @@protoc_insertion_point(field_get:chat.newMessage.recipient)
  return _internal_recipient();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void newMessage::set_recipient(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.recipient_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.newMessage.recipient)
}
inline std::string* newMessage::mutable_recipient() {
  std::string* _s = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:chat.newMessage.recipient)
  return _s;
}
inline const std::string& newMessage::_internal_recipient() const {
  return _impl_.recipient_.Get();
}
inline void newMessage::_internal_set_recipient(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.recipient_.Set(value, GetArenaForAllocation());
}
inline std::string* newMessage::_internal_mutable_recipient() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.recipient_.Mutable(GetArenaForAllocation());
}
inline std::string* newMessage::release_recipient() {
  // @@protoc_insertion_point(field_release:chat.newMessage.recipient)
  if (!_internal_has_recipient()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.recipient_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recipient_.IsDefault()) {
    _impl_.recipient_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void newMessage::set_allocated_recipient(std::string* recipient) {
  if (recipient != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.recipient_.SetAllocated(recipient, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recipient_.IsDefault()) {
    _impl_.recipient_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.newMessage.recipient)
}

// required string message = 4;
inline bool newMessage::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool newMessage::has_message() const {
  return _internal_has_message();
}
inline void newMessage::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& newMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.newMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void newMessage::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.newMessage.message)
}
inline std::string* newMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:chat.newMessage.message)
  return _s;
}
inline const std::string& newMessage::_internal_message() const {
  return _impl_.message_.Get();
}
inline void newMessage::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* newMessage::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* newMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.newMessage.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void newMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.newMessage.message)
}

// -------------------------------------------------------------------

// UserRegister

// required string username = 1;
inline bool UserRegister::_internal_has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserRegister::has_username() const {
  return _internal_has_username();
}
inline void UserRegister::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserRegister::username() const {
  // @@protoc_insertion_point(field_get:chat.UserRegister.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserRegister::set_username(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.UserRegister.username)
}
inline std::string* UserRegister::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:chat.UserRegister.username)
  return _s;
}
inline const std::string& UserRegister::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UserRegister::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserRegister::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserRegister::release_username() {
  // @@protoc_insertion_point(field_release:chat.UserRegister.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserRegister::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserRegister.username)
}

// required string ip = 2;
inline bool UserRegister::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserRegister::has_ip() const {
  return _internal_has_ip();
}
inline void UserRegister::clear_ip() {
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserRegister::ip() const {
  // @@protoc_insertion_point(field_get:chat.UserRegister.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserRegister::set_ip(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.UserRegister.ip)
}
inline std::string* UserRegister::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:chat.UserRegister.ip)
  return _s;
}
inline const std::string& UserRegister::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void UserRegister::_internal_set_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* UserRegister::_internal_mutable_ip() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* UserRegister::release_ip() {
  // @@protoc_insertion_point(field_release:chat.UserRegister.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserRegister::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserRegister.ip)
}

// -------------------------------------------------------------------

// UserInfoRequest

// required bool type_request = 1;
inline bool UserInfoRequest::_internal_has_type_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInfoRequest::has_type_request() const {
  return _internal_has_type_request();
}
inline void UserInfoRequest::clear_type_request() {
  _impl_.type_request_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool UserInfoRequest::_internal_type_request() const {
  return _impl_.type_request_;
}
inline bool UserInfoRequest::type_request() const {
  // @@protoc_insertion_point(field_get:chat.UserInfoRequest.type_request)
  return _internal_type_request();
}
inline void UserInfoRequest::_internal_set_type_request(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_request_ = value;
}
inline void UserInfoRequest::set_type_request(bool value) {
  _internal_set_type_request(value);
  // @@protoc_insertion_point(field_set:chat.UserInfoRequest.type_request)
}

// optional string user = 2;
inline bool UserInfoRequest::_internal_has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInfoRequest::has_user() const {
  return _internal_has_user();
}
inline void UserInfoRequest::clear_user() {
  _impl_.user_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserInfoRequest::user() const {
  // @@protoc_insertion_point(field_get:chat.UserInfoRequest.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoRequest::set_user(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.user_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.UserInfoRequest.user)
}
inline std::string* UserInfoRequest::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:chat.UserInfoRequest.user)
  return _s;
}
inline const std::string& UserInfoRequest::_internal_user() const {
  return _impl_.user_.Get();
}
inline void UserInfoRequest::_internal_set_user(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfoRequest::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfoRequest::release_user() {
  // @@protoc_insertion_point(field_release:chat.UserInfoRequest.user)
  if (!_internal_has_user()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.user_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserInfoRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_.SetAllocated(user, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserInfoRequest.user)
}

// -------------------------------------------------------------------

// ChangeStatus

// required string username = 1;
inline bool ChangeStatus::_internal_has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChangeStatus::has_username() const {
  return _internal_has_username();
}
inline void ChangeStatus::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChangeStatus::username() const {
  // @@protoc_insertion_point(field_get:chat.ChangeStatus.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeStatus::set_username(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ChangeStatus.username)
}
inline std::string* ChangeStatus::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:chat.ChangeStatus.username)
  return _s;
}
inline const std::string& ChangeStatus::_internal_username() const {
  return _impl_.username_.Get();
}
inline void ChangeStatus::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangeStatus::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* ChangeStatus::release_username() {
  // @@protoc_insertion_point(field_release:chat.ChangeStatus.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChangeStatus::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.ChangeStatus.username)
}

// required int32 newStatus = 2;
inline bool ChangeStatus::_internal_has_newstatus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChangeStatus::has_newstatus() const {
  return _internal_has_newstatus();
}
inline void ChangeStatus::clear_newstatus() {
  _impl_.newstatus_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ChangeStatus::_internal_newstatus() const {
  return _impl_.newstatus_;
}
inline int32_t ChangeStatus::newstatus() const {
  // @@protoc_insertion_point(field_get:chat.ChangeStatus.newStatus)
  return _internal_newstatus();
}
inline void ChangeStatus::_internal_set_newstatus(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.newstatus_ = value;
}
inline void ChangeStatus::set_newstatus(int32_t value) {
  _internal_set_newstatus(value);
  // @@protoc_insertion_point(field_set:chat.ChangeStatus.newStatus)
}

// -------------------------------------------------------------------

// UserRequest

// required int32 option = 1;
inline bool UserRequest::_internal_has_option() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserRequest::has_option() const {
  return _internal_has_option();
}
inline void UserRequest::clear_option() {
  _impl_.option_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t UserRequest::_internal_option() const {
  return _impl_.option_;
}
inline int32_t UserRequest::option() const {
  // @@protoc_insertion_point(field_get:chat.UserRequest.option)
  return _internal_option();
}
inline void UserRequest::_internal_set_option(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.option_ = value;
}
inline void UserRequest::set_option(int32_t value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:chat.UserRequest.option)
}

// optional .chat.UserRegister newUser = 2;
inline bool UserRequest::_internal_has_newuser() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newuser_ != nullptr);
  return value;
}
inline bool UserRequest::has_newuser() const {
  return _internal_has_newuser();
}
inline void UserRequest::clear_newuser() {
  if (_impl_.newuser_ != nullptr) _impl_.newuser_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::chat::UserRegister& UserRequest::_internal_newuser() const {
  const ::chat::UserRegister* p = _impl_.newuser_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::UserRegister&>(
      ::chat::_UserRegister_default_instance_);
}
inline const ::chat::UserRegister& UserRequest::newuser() const {
  // @@protoc_insertion_point(field_get:chat.UserRequest.newUser)
  return _internal_newuser();
}
inline void UserRequest::unsafe_arena_set_allocated_newuser(
    ::chat::UserRegister* newuser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newuser_);
  }
  _impl_.newuser_ = newuser;
  if (newuser) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.UserRequest.newUser)
}
inline ::chat::UserRegister* UserRequest::release_newuser() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::chat::UserRegister* temp = _impl_.newuser_;
  _impl_.newuser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::UserRegister* UserRequest::unsafe_arena_release_newuser() {
  // @@protoc_insertion_point(field_release:chat.UserRequest.newUser)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::chat::UserRegister* temp = _impl_.newuser_;
  _impl_.newuser_ = nullptr;
  return temp;
}
inline ::chat::UserRegister* UserRequest::_internal_mutable_newuser() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.newuser_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::UserRegister>(GetArenaForAllocation());
    _impl_.newuser_ = p;
  }
  return _impl_.newuser_;
}
inline ::chat::UserRegister* UserRequest::mutable_newuser() {
  ::chat::UserRegister* _msg = _internal_mutable_newuser();
  // @@protoc_insertion_point(field_mutable:chat.UserRequest.newUser)
  return _msg;
}
inline void UserRequest::set_allocated_newuser(::chat::UserRegister* newuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newuser_;
  }
  if (newuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newuser);
    if (message_arena != submessage_arena) {
      newuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newuser, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.newuser_ = newuser;
  // @@protoc_insertion_point(field_set_allocated:chat.UserRequest.newUser)
}

// optional .chat.UserInfoRequest infoRequest = 3;
inline bool UserRequest::_internal_has_inforequest() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inforequest_ != nullptr);
  return value;
}
inline bool UserRequest::has_inforequest() const {
  return _internal_has_inforequest();
}
inline void UserRequest::clear_inforequest() {
  if (_impl_.inforequest_ != nullptr) _impl_.inforequest_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::chat::UserInfoRequest& UserRequest::_internal_inforequest() const {
  const ::chat::UserInfoRequest* p = _impl_.inforequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::UserInfoRequest&>(
      ::chat::_UserInfoRequest_default_instance_);
}
inline const ::chat::UserInfoRequest& UserRequest::inforequest() const {
  // @@protoc_insertion_point(field_get:chat.UserRequest.infoRequest)
  return _internal_inforequest();
}
inline void UserRequest::unsafe_arena_set_allocated_inforequest(
    ::chat::UserInfoRequest* inforequest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inforequest_);
  }
  _impl_.inforequest_ = inforequest;
  if (inforequest) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.UserRequest.infoRequest)
}
inline ::chat::UserInfoRequest* UserRequest::release_inforequest() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::chat::UserInfoRequest* temp = _impl_.inforequest_;
  _impl_.inforequest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::UserInfoRequest* UserRequest::unsafe_arena_release_inforequest() {
  // @@protoc_insertion_point(field_release:chat.UserRequest.infoRequest)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::chat::UserInfoRequest* temp = _impl_.inforequest_;
  _impl_.inforequest_ = nullptr;
  return temp;
}
inline ::chat::UserInfoRequest* UserRequest::_internal_mutable_inforequest() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.inforequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::UserInfoRequest>(GetArenaForAllocation());
    _impl_.inforequest_ = p;
  }
  return _impl_.inforequest_;
}
inline ::chat::UserInfoRequest* UserRequest::mutable_inforequest() {
  ::chat::UserInfoRequest* _msg = _internal_mutable_inforequest();
  // @@protoc_insertion_point(field_mutable:chat.UserRequest.infoRequest)
  return _msg;
}
inline void UserRequest::set_allocated_inforequest(::chat::UserInfoRequest* inforequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inforequest_;
  }
  if (inforequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inforequest);
    if (message_arena != submessage_arena) {
      inforequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inforequest, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.inforequest_ = inforequest;
  // @@protoc_insertion_point(field_set_allocated:chat.UserRequest.infoRequest)
}

// optional .chat.ChangeStatus status = 4;
inline bool UserRequest::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline bool UserRequest::has_status() const {
  return _internal_has_status();
}
inline void UserRequest::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::chat::ChangeStatus& UserRequest::_internal_status() const {
  const ::chat::ChangeStatus* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::ChangeStatus&>(
      ::chat::_ChangeStatus_default_instance_);
}
inline const ::chat::ChangeStatus& UserRequest::status() const {
  // @@protoc_insertion_point(field_get:chat.UserRequest.status)
  return _internal_status();
}
inline void UserRequest::unsafe_arena_set_allocated_status(
    ::chat::ChangeStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.UserRequest.status)
}
inline ::chat::ChangeStatus* UserRequest::release_status() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::chat::ChangeStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::ChangeStatus* UserRequest::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:chat.UserRequest.status)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::chat::ChangeStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::chat::ChangeStatus* UserRequest::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::ChangeStatus>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::chat::ChangeStatus* UserRequest::mutable_status() {
  ::chat::ChangeStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:chat.UserRequest.status)
  return _msg;
}
inline void UserRequest::set_allocated_status(::chat::ChangeStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:chat.UserRequest.status)
}

// optional .chat.newMessage message = 5;
inline bool UserRequest::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.message_ != nullptr);
  return value;
}
inline bool UserRequest::has_message() const {
  return _internal_has_message();
}
inline void UserRequest::clear_message() {
  if (_impl_.message_ != nullptr) _impl_.message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::chat::newMessage& UserRequest::_internal_message() const {
  const ::chat::newMessage* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::newMessage&>(
      ::chat::_newMessage_default_instance_);
}
inline const ::chat::newMessage& UserRequest::message() const {
  // @@protoc_insertion_point(field_get:chat.UserRequest.message)
  return _internal_message();
}
inline void UserRequest::unsafe_arena_set_allocated_message(
    ::chat::newMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = message;
  if (message) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.UserRequest.message)
}
inline ::chat::newMessage* UserRequest::release_message() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::chat::newMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::newMessage* UserRequest::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:chat.UserRequest.message)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::chat::newMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::chat::newMessage* UserRequest::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.message_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::newMessage>(GetArenaForAllocation());
    _impl_.message_ = p;
  }
  return _impl_.message_;
}
inline ::chat::newMessage* UserRequest::mutable_message() {
  ::chat::newMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:chat.UserRequest.message)
  return _msg;
}
inline void UserRequest::set_allocated_message(::chat::newMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_set_allocated:chat.UserRequest.message)
}

// -------------------------------------------------------------------

// UserInfo

// optional string username = 1;
inline bool UserInfo::_internal_has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInfo::has_username() const {
  return _internal_has_username();
}
inline void UserInfo::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:chat.UserInfo.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_username(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.UserInfo.username)
}
inline std::string* UserInfo::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:chat.UserInfo.username)
  return _s;
}
inline const std::string& UserInfo::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UserInfo::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_username() {
  // @@protoc_insertion_point(field_release:chat.UserInfo.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserInfo.username)
}

// optional string ip = 2;
inline bool UserInfo::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInfo::has_ip() const {
  return _internal_has_ip();
}
inline void UserInfo::clear_ip() {
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserInfo::ip() const {
  // @@protoc_insertion_point(field_get:chat.UserInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.UserInfo.ip)
}
inline std::string* UserInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:chat.UserInfo.ip)
  return _s;
}
inline const std::string& UserInfo::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void UserInfo::_internal_set_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_ip() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_ip() {
  // @@protoc_insertion_point(field_release:chat.UserInfo.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.UserInfo.ip)
}

// optional int32 status = 3;
inline bool UserInfo::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserInfo::has_status() const {
  return _internal_has_status();
}
inline void UserInfo::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t UserInfo::_internal_status() const {
  return _impl_.status_;
}
inline int32_t UserInfo::status() const {
  // @@protoc_insertion_point(field_get:chat.UserInfo.status)
  return _internal_status();
}
inline void UserInfo::_internal_set_status(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.status_ = value;
}
inline void UserInfo::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:chat.UserInfo.status)
}

// -------------------------------------------------------------------

// AllConnectedUsers

// repeated .chat.UserInfo connectedUsers = 1;
inline int AllConnectedUsers::_internal_connectedusers_size() const {
  return _impl_.connectedusers_.size();
}
inline int AllConnectedUsers::connectedusers_size() const {
  return _internal_connectedusers_size();
}
inline void AllConnectedUsers::clear_connectedusers() {
  _impl_.connectedusers_.Clear();
}
inline ::chat::UserInfo* AllConnectedUsers::mutable_connectedusers(int index) {
  // @@protoc_insertion_point(field_mutable:chat.AllConnectedUsers.connectedUsers)
  return _impl_.connectedusers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInfo >*
AllConnectedUsers::mutable_connectedusers() {
  // @@protoc_insertion_point(field_mutable_list:chat.AllConnectedUsers.connectedUsers)
  return &_impl_.connectedusers_;
}
inline const ::chat::UserInfo& AllConnectedUsers::_internal_connectedusers(int index) const {
  return _impl_.connectedusers_.Get(index);
}
inline const ::chat::UserInfo& AllConnectedUsers::connectedusers(int index) const {
  // @@protoc_insertion_point(field_get:chat.AllConnectedUsers.connectedUsers)
  return _internal_connectedusers(index);
}
inline ::chat::UserInfo* AllConnectedUsers::_internal_add_connectedusers() {
  return _impl_.connectedusers_.Add();
}
inline ::chat::UserInfo* AllConnectedUsers::add_connectedusers() {
  ::chat::UserInfo* _add = _internal_add_connectedusers();
  // @@protoc_insertion_point(field_add:chat.AllConnectedUsers.connectedUsers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::UserInfo >&
AllConnectedUsers::connectedusers() const {
  // @@protoc_insertion_point(field_list:chat.AllConnectedUsers.connectedUsers)
  return _impl_.connectedusers_;
}

// -------------------------------------------------------------------

// ServerResponse

// required int32 option = 1;
inline bool ServerResponse::_internal_has_option() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ServerResponse::has_option() const {
  return _internal_has_option();
}
inline void ServerResponse::clear_option() {
  _impl_.option_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ServerResponse::_internal_option() const {
  return _impl_.option_;
}
inline int32_t ServerResponse::option() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.option)
  return _internal_option();
}
inline void ServerResponse::_internal_set_option(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.option_ = value;
}
inline void ServerResponse::set_option(int32_t value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:chat.ServerResponse.option)
}

// required int32 code = 2;
inline bool ServerResponse::_internal_has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ServerResponse::has_code() const {
  return _internal_has_code();
}
inline void ServerResponse::clear_code() {
  _impl_.code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t ServerResponse::_internal_code() const {
  return _impl_.code_;
}
inline int32_t ServerResponse::code() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.code)
  return _internal_code();
}
inline void ServerResponse::_internal_set_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.code_ = value;
}
inline void ServerResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:chat.ServerResponse.code)
}

// required string serverMessage = 3;
inline bool ServerResponse::_internal_has_servermessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerResponse::has_servermessage() const {
  return _internal_has_servermessage();
}
inline void ServerResponse::clear_servermessage() {
  _impl_.servermessage_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerResponse::servermessage() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.serverMessage)
  return _internal_servermessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerResponse::set_servermessage(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.servermessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.ServerResponse.serverMessage)
}
inline std::string* ServerResponse::mutable_servermessage() {
  std::string* _s = _internal_mutable_servermessage();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.serverMessage)
  return _s;
}
inline const std::string& ServerResponse::_internal_servermessage() const {
  return _impl_.servermessage_.Get();
}
inline void ServerResponse::_internal_set_servermessage(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.servermessage_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerResponse::_internal_mutable_servermessage() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.servermessage_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerResponse::release_servermessage() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.serverMessage)
  if (!_internal_has_servermessage()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.servermessage_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servermessage_.IsDefault()) {
    _impl_.servermessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerResponse::set_allocated_servermessage(std::string* servermessage) {
  if (servermessage != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.servermessage_.SetAllocated(servermessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servermessage_.IsDefault()) {
    _impl_.servermessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.serverMessage)
}

// optional .chat.AllConnectedUsers connectedUsers = 4;
inline bool ServerResponse::_internal_has_connectedusers() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connectedusers_ != nullptr);
  return value;
}
inline bool ServerResponse::has_connectedusers() const {
  return _internal_has_connectedusers();
}
inline void ServerResponse::clear_connectedusers() {
  if (_impl_.connectedusers_ != nullptr) _impl_.connectedusers_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::chat::AllConnectedUsers& ServerResponse::_internal_connectedusers() const {
  const ::chat::AllConnectedUsers* p = _impl_.connectedusers_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::AllConnectedUsers&>(
      ::chat::_AllConnectedUsers_default_instance_);
}
inline const ::chat::AllConnectedUsers& ServerResponse::connectedusers() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.connectedUsers)
  return _internal_connectedusers();
}
inline void ServerResponse::unsafe_arena_set_allocated_connectedusers(
    ::chat::AllConnectedUsers* connectedusers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connectedusers_);
  }
  _impl_.connectedusers_ = connectedusers;
  if (connectedusers) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ServerResponse.connectedUsers)
}
inline ::chat::AllConnectedUsers* ServerResponse::release_connectedusers() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::chat::AllConnectedUsers* temp = _impl_.connectedusers_;
  _impl_.connectedusers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::AllConnectedUsers* ServerResponse::unsafe_arena_release_connectedusers() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.connectedUsers)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::chat::AllConnectedUsers* temp = _impl_.connectedusers_;
  _impl_.connectedusers_ = nullptr;
  return temp;
}
inline ::chat::AllConnectedUsers* ServerResponse::_internal_mutable_connectedusers() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.connectedusers_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::AllConnectedUsers>(GetArenaForAllocation());
    _impl_.connectedusers_ = p;
  }
  return _impl_.connectedusers_;
}
inline ::chat::AllConnectedUsers* ServerResponse::mutable_connectedusers() {
  ::chat::AllConnectedUsers* _msg = _internal_mutable_connectedusers();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.connectedUsers)
  return _msg;
}
inline void ServerResponse::set_allocated_connectedusers(::chat::AllConnectedUsers* connectedusers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connectedusers_;
  }
  if (connectedusers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connectedusers);
    if (message_arena != submessage_arena) {
      connectedusers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connectedusers, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.connectedusers_ = connectedusers;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.connectedUsers)
}

// optional .chat.newMessage message = 5;
inline bool ServerResponse::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.message_ != nullptr);
  return value;
}
inline bool ServerResponse::has_message() const {
  return _internal_has_message();
}
inline void ServerResponse::clear_message() {
  if (_impl_.message_ != nullptr) _impl_.message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::chat::newMessage& ServerResponse::_internal_message() const {
  const ::chat::newMessage* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::newMessage&>(
      ::chat::_newMessage_default_instance_);
}
inline const ::chat::newMessage& ServerResponse::message() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.message)
  return _internal_message();
}
inline void ServerResponse::unsafe_arena_set_allocated_message(
    ::chat::newMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = message;
  if (message) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ServerResponse.message)
}
inline ::chat::newMessage* ServerResponse::release_message() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::chat::newMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::newMessage* ServerResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.message)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::chat::newMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::chat::newMessage* ServerResponse::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.message_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::newMessage>(GetArenaForAllocation());
    _impl_.message_ = p;
  }
  return _impl_.message_;
}
inline ::chat::newMessage* ServerResponse::mutable_message() {
  ::chat::newMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.message)
  return _msg;
}
inline void ServerResponse::set_allocated_message(::chat::newMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.message)
}

// optional .chat.UserInfo userInfoResponse = 6;
inline bool ServerResponse::_internal_has_userinforesponse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.userinforesponse_ != nullptr);
  return value;
}
inline bool ServerResponse::has_userinforesponse() const {
  return _internal_has_userinforesponse();
}
inline void ServerResponse::clear_userinforesponse() {
  if (_impl_.userinforesponse_ != nullptr) _impl_.userinforesponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::chat::UserInfo& ServerResponse::_internal_userinforesponse() const {
  const ::chat::UserInfo* p = _impl_.userinforesponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::UserInfo&>(
      ::chat::_UserInfo_default_instance_);
}
inline const ::chat::UserInfo& ServerResponse::userinforesponse() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.userInfoResponse)
  return _internal_userinforesponse();
}
inline void ServerResponse::unsafe_arena_set_allocated_userinforesponse(
    ::chat::UserInfo* userinforesponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinforesponse_);
  }
  _impl_.userinforesponse_ = userinforesponse;
  if (userinforesponse) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ServerResponse.userInfoResponse)
}
inline ::chat::UserInfo* ServerResponse::release_userinforesponse() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::chat::UserInfo* temp = _impl_.userinforesponse_;
  _impl_.userinforesponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::UserInfo* ServerResponse::unsafe_arena_release_userinforesponse() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.userInfoResponse)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::chat::UserInfo* temp = _impl_.userinforesponse_;
  _impl_.userinforesponse_ = nullptr;
  return temp;
}
inline ::chat::UserInfo* ServerResponse::_internal_mutable_userinforesponse() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.userinforesponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::UserInfo>(GetArenaForAllocation());
    _impl_.userinforesponse_ = p;
  }
  return _impl_.userinforesponse_;
}
inline ::chat::UserInfo* ServerResponse::mutable_userinforesponse() {
  ::chat::UserInfo* _msg = _internal_mutable_userinforesponse();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.userInfoResponse)
  return _msg;
}
inline void ServerResponse::set_allocated_userinforesponse(::chat::UserInfo* userinforesponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.userinforesponse_;
  }
  if (userinforesponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(userinforesponse);
    if (message_arena != submessage_arena) {
      userinforesponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinforesponse, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.userinforesponse_ = userinforesponse;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.userInfoResponse)
}

// optional .chat.ChangeStatus change = 7;
inline bool ServerResponse::_internal_has_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.change_ != nullptr);
  return value;
}
inline bool ServerResponse::has_change() const {
  return _internal_has_change();
}
inline void ServerResponse::clear_change() {
  if (_impl_.change_ != nullptr) _impl_.change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::chat::ChangeStatus& ServerResponse::_internal_change() const {
  const ::chat::ChangeStatus* p = _impl_.change_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat::ChangeStatus&>(
      ::chat::_ChangeStatus_default_instance_);
}
inline const ::chat::ChangeStatus& ServerResponse::change() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.change)
  return _internal_change();
}
inline void ServerResponse::unsafe_arena_set_allocated_change(
    ::chat::ChangeStatus* change) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.change_);
  }
  _impl_.change_ = change;
  if (change) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat.ServerResponse.change)
}
inline ::chat::ChangeStatus* ServerResponse::release_change() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::chat::ChangeStatus* temp = _impl_.change_;
  _impl_.change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat::ChangeStatus* ServerResponse::unsafe_arena_release_change() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.change)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::chat::ChangeStatus* temp = _impl_.change_;
  _impl_.change_ = nullptr;
  return temp;
}
inline ::chat::ChangeStatus* ServerResponse::_internal_mutable_change() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.change_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::ChangeStatus>(GetArenaForAllocation());
    _impl_.change_ = p;
  }
  return _impl_.change_;
}
inline ::chat::ChangeStatus* ServerResponse::mutable_change() {
  ::chat::ChangeStatus* _msg = _internal_mutable_change();
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.change)
  return _msg;
}
inline void ServerResponse::set_allocated_change(::chat::ChangeStatus* change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.change_;
  }
  if (change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(change);
    if (message_arena != submessage_arena) {
      change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.change_ = change;
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.change)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_project_2eproto
